#!/usr/bin/env python3
"""
Advanced Web Pentesting Demo Script

This script demonstrates the new advanced web pentesting capabilities
including WAF bypass, authentication bypass, API security testing,
client-side security testing, and comprehensive web pentesting.
"""

import asyncio
import json
import aiohttp
import time
from typing import Dict, Any
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# API base URL
API_BASE_URL = "http://localhost:8000"

# Test targets (demo URLs - replace with actual test targets)
TEST_TARGETS = {
    "demo_webapp": "http://demo.testfire.net",
    "demo_api": "http://demo.testfire.net/api",
    "demo_login": "http://demo.testfire.net/login"
}

async def test_waf_bypass():
    """Test WAF bypass capabilities"""
    logger.info("üîç Testing WAF Bypass Capabilities...")
    
    url = f"{API_BASE_URL}/web-pentest/waf-bypass"
    payload = {
        "target_url": TEST_TARGETS["demo_webapp"],
        "waf_type": None,  # Auto-detect
        "encoding_methods": ["url", "html", "hex", "base64", "unicode"]
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as response:
                if response.status == 200:
                    result = await response.json()
                    logger.info(f"‚úÖ WAF Bypass Test Completed")
                    logger.info(f"   WAF Detected: {result['waf_detected']}")
                    logger.info(f"   Successful Bypasses: {result['successful_bypasses']}")
                    logger.info(f"   Recommendations: {result['recommendations']}")
                    
                    # Show some bypass results
                    for i, bypass in enumerate(result['bypass_results'][:3]):
                        logger.info(f"   Bypass {i+1}: {bypass['technique']} - {'‚úÖ' if bypass['bypass_successful'] else '‚ùå'}")
                    
                    return result
                else:
                    logger.error(f"‚ùå WAF Bypass Test Failed: {response.status}")
                    return None
    except Exception as e:
        logger.error(f"‚ùå Error in WAF bypass test: {e}")
        return None

async def test_auth_bypass():
    """Test authentication bypass capabilities"""
    logger.info("üîê Testing Authentication Bypass Capabilities...")
    
    url = f"{API_BASE_URL}/web-pentest/auth-bypass"
    payload = {
        "target_url": TEST_TARGETS["demo_webapp"],
        "login_endpoint": TEST_TARGETS["demo_login"],
        "injection_points": ["username", "email", "user", "login"]
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as response:
                if response.status == 200:
                    result = await response.json()
                    logger.info(f"‚úÖ Auth Bypass Test Completed")
                    logger.info(f"   Successful Bypasses: {result['successful_bypasses']}")
                    logger.info(f"   Risk Level: {result['risk_level']}")
                    logger.info(f"   Recommendations: {result['recommendations']}")
                    
                    # Show some bypass results
                    for i, bypass in enumerate(result['bypass_results'][:3]):
                        logger.info(f"   Bypass {i+1}: {bypass['technique']} - {'‚úÖ' if bypass['success'] else '‚ùå'}")
                    
                    return result
                else:
                    logger.error(f"‚ùå Auth Bypass Test Failed: {response.status}")
                    return None
    except Exception as e:
        logger.error(f"‚ùå Error in auth bypass test: {e}")
        return None

async def test_api_security():
    """Test API security capabilities"""
    logger.info("üîå Testing API Security Capabilities...")
    
    url = f"{API_BASE_URL}/web-pentest/api-security"
    payload = {
        "api_endpoint": TEST_TARGETS["demo_api"],
        "method": "GET",
        "test_types": ["input_validation", "authentication", "authorization", "rate_limiting"]
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as response:
                if response.status == 200:
                    result = await response.json()
                    logger.info(f"‚úÖ API Security Test Completed")
                    logger.info(f"   Vulnerabilities Found: {result['vulnerabilities_found']}")
                    logger.info(f"   Risk Assessment: {result['risk_assessment']}")
                    logger.info(f"   Recommendations: {result['recommendations']}")
                    
                    # Show test results by type
                    for test_type, results in result['test_results'].items():
                        logger.info(f"   {test_type}: {len(results)} tests")
                    
                    return result
                else:
                    logger.error(f"‚ùå API Security Test Failed: {response.status}")
                    return None
    except Exception as e:
        logger.error(f"‚ùå Error in API security test: {e}")
        return None

async def test_client_side_security():
    """Test client-side security capabilities"""
    logger.info("üåê Testing Client-Side Security Capabilities...")
    
    url = f"{API_BASE_URL}/web-pentest/client-side"
    payload = {
        "target_url": TEST_TARGETS["demo_webapp"],
        "test_types": ["xss", "csp", "javascript"]
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as response:
                if response.status == 200:
                    result = await response.json()
                    logger.info(f"‚úÖ Client-Side Security Test Completed")
                    logger.info(f"   Vulnerabilities Found: {result['vulnerabilities_found']}")
                    logger.info(f"   Risk Level: {result['risk_level']}")
                    logger.info(f"   Recommendations: {result['recommendations']}")
                    
                    # Show test results by type
                    for test_type, results in result['test_results'].items():
                        if isinstance(results, list):
                            logger.info(f"   {test_type}: {len(results)} vulnerabilities")
                        else:
                            logger.info(f"   {test_type}: {results}")
                    
                    return result
                else:
                    logger.error(f"‚ùå Client-Side Security Test Failed: {response.status}")
                    return None
    except Exception as e:
        logger.error(f"‚ùå Error in client-side security test: {e}")
        return None

async def test_comprehensive_web_pentest():
    """Test comprehensive web pentesting capabilities"""
    logger.info("üéØ Testing Comprehensive Web Pentesting Capabilities...")
    
    url = f"{API_BASE_URL}/web-pentest/comprehensive"
    payload = {
        "target_url": TEST_TARGETS["demo_webapp"],
        "include_waf_bypass": True,
        "include_auth_bypass": True,
        "include_api_security": True,
        "include_client_side": True,
        "include_exploitation_chain": True
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as response:
                if response.status == 200:
                    result = await response.json()
                    logger.info(f"‚úÖ Comprehensive Web Pentest Completed")
                    
                    # Show summary
                    summary = result['summary']
                    logger.info(f"   Total Vulnerabilities: {summary.get('total_vulnerabilities', 0)}")
                    logger.info(f"   High Risk: {summary.get('high_risk_vulnerabilities', 0)}")
                    logger.info(f"   Medium Risk: {summary.get('medium_risk_vulnerabilities', 0)}")
                    logger.info(f"   Low Risk: {summary.get('low_risk_vulnerabilities', 0)}")
                    logger.info(f"   WAF Detected: {summary.get('waf_detected', False)}")
                    logger.info(f"   Auth Bypass Possible: {summary.get('auth_bypass_possible', False)}")
                    
                    # Show exploitation chain if available
                    if result.get('exploitation_chain'):
                        chain = result['exploitation_chain']
                        logger.info(f"   Exploitation Chain: {len(chain.get('exploitation_steps', []))} steps")
                        logger.info(f"   Success Probability: {chain.get('success_probability', 0):.2%}")
                        logger.info(f"   Risk Level: {chain.get('risk_level', 'Unknown')}")
                    
                    logger.info(f"   Recommendations: {result['recommendations']}")
                    
                    return result
                else:
                    logger.error(f"‚ùå Comprehensive Web Pentest Failed: {response.status}")
                    return None
    except Exception as e:
        logger.error(f"‚ùå Error in comprehensive web pentest: {e}")
        return None

async def get_web_pentest_statistics():
    """Get web pentesting statistics"""
    logger.info("üìä Getting Web Pentesting Statistics...")
    
    url = f"{API_BASE_URL}/web-pentest/statistics"
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    result = await response.json()
                    logger.info(f"‚úÖ Statistics Retrieved")
                    logger.info(f"   Total Pentests: {result['total_pentests']}")
                    logger.info(f"   Vulnerabilities Found: {result['vulnerabilities_found']}")
                    logger.info(f"   High Risk: {result['high_risk_vulns']}")
                    logger.info(f"   Medium Risk: {result['medium_risk_vulns']}")
                    logger.info(f"   Low Risk: {result['low_risk_vulns']}")
                    logger.info(f"   WAF Bypasses: {result['waf_bypasses']}")
                    logger.info(f"   Auth Bypasses: {result['auth_bypasses']}")
                    logger.info(f"   API Vulnerabilities: {result['api_vulnerabilities']}")
                    logger.info(f"   Client-Side Vulnerabilities: {result['client_side_vulns']}")
                    logger.info(f"   Success Rate: {result['success_rate']:.2%}")
                    
                    return result
                else:
                    logger.error(f"‚ùå Statistics Retrieval Failed: {response.status}")
                    return None
    except Exception as e:
        logger.error(f"‚ùå Error getting statistics: {e}")
        return None

async def test_enhanced_burp_integration():
    """Test enhanced Burp Suite Pro integration"""
    logger.info("üîß Testing Enhanced Burp Suite Pro Integration...")
    
    # Test different scan profiles
    scan_profiles = ["default", "aggressive", "stealth", "api_focused", "xss_focused"]
    
    for profile in scan_profiles:
        logger.info(f"   Testing scan profile: {profile}")
        # This would typically call the Burp client directly
        # For demo purposes, we'll just log the profile
        await asyncio.sleep(0.5)  # Simulate scan time
    
    logger.info("‚úÖ Enhanced Burp Integration Test Completed")
    return {"scan_profiles_tested": scan_profiles}

async def run_advanced_web_pentesting_demo():
    """Run the complete advanced web pentesting demo"""
    logger.info("üöÄ Starting Advanced Web Pentesting Demo")
    logger.info("=" * 60)
    
    start_time = time.time()
    
    # Run all tests
    results = {}
    
    # 1. WAF Bypass Test
    results['waf_bypass'] = await test_waf_bypass()
    logger.info("-" * 40)
    
    # 2. Authentication Bypass Test
    results['auth_bypass'] = await test_auth_bypass()
    logger.info("-" * 40)
    
    # 3. API Security Test
    results['api_security'] = await test_api_security()
    logger.info("-" * 40)
    
    # 4. Client-Side Security Test
    results['client_side'] = await test_client_side_security()
    logger.info("-" * 40)
    
    # 5. Comprehensive Web Pentest
    results['comprehensive'] = await test_comprehensive_web_pentest()
    logger.info("-" * 40)
    
    # 6. Enhanced Burp Integration
    results['burp_integration'] = await test_enhanced_burp_integration()
    logger.info("-" * 40)
    
    # 7. Statistics
    results['statistics'] = await get_web_pentest_statistics()
    logger.info("-" * 40)
    
    # Calculate total time
    total_time = time.time() - start_time
    
    # Summary
    logger.info("üìã Demo Summary")
    logger.info("=" * 60)
    logger.info(f"Total Demo Time: {total_time:.2f} seconds")
    
    # Count successful tests
    successful_tests = sum(1 for result in results.values() if result is not None)
    total_tests = len(results)
    
    logger.info(f"Successful Tests: {successful_tests}/{total_tests}")
    logger.info(f"Success Rate: {successful_tests/total_tests:.2%}")
    
    # Save results to file
    with open("advanced_web_pentesting_results.json", "w") as f:
        json.dump(results, f, indent=2, default=str)
    
    logger.info("üíæ Results saved to: advanced_web_pentesting_results.json")
    logger.info("üéâ Advanced Web Pentesting Demo Completed!")
    
    return results

def main():
    """Main function"""
    print("üîí Advanced Web Pentesting Demo")
    print("=" * 60)
    print("This demo showcases the new advanced web pentesting capabilities:")
    print("‚Ä¢ WAF Bypass Testing")
    print("‚Ä¢ Authentication Bypass Testing")
    print("‚Ä¢ API Security Testing")
    print("‚Ä¢ Client-Side Security Testing")
    print("‚Ä¢ Comprehensive Web Pentesting")
    print("‚Ä¢ Enhanced Burp Suite Pro Integration")
    print("‚Ä¢ Advanced Exploitation Chains")
    print("=" * 60)
    
    # Run the demo
    asyncio.run(run_advanced_web_pentesting_demo())

if __name__ == "__main__":
    main()
