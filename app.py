from dotenv import load_dotenv
import streamlit as st
import os
from PyPDF2 import PdfReader
from langchain.text_splitter import CharacterTextSplitter
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_community.vectorstores import FAISS
from langchain_groq import ChatGroq
from langchain.memory import ConversationBufferMemory
from langchain.chains import ConversationalRetrievalChain
from htmlTemplates import css, bot_template, user_template
from langchain.llms import huggingface_hub
from langchain.prompts import PromptTemplate
from langchain.chains.combine_documents.stuff import StuffDocumentsChain
from langchain.chains import LLMChain




def get_pdf_text(pdf_docs):
    text = ""
    for pdf in pdf_docs:
        pdf_reader = PdfReader(pdf)
        for page in pdf_reader.pages:
            text += page.extract_text()
    return text

def get_text_chunks(raw_text):
    text_splitter = CharacterTextSplitter(
        separator="\n",
        chunk_size=1000,
        chunk_overlap=200,
        length_function=len
    )
    chunks = text_splitter.split_text(raw_text)
    return chunks

def get_vectorstore(text_chunks):
    embeddings = HuggingFaceEmbeddings(model_name="BAAI/bge-large-en")
    vectorstore = FAISS.from_texts(texts=text_chunks, embedding=embeddings)
    return vectorstore

def get_conversation_chain(vectorstore):
    llm = ChatGroq(model="openai/gpt-oss-20b", api_key=os.getenv("GROQ_API_KEY"))
    # llm = huggingface_hub.HuggingFaceHub(repo_id="google/flan-t5-xxl", model_kwargs={"temperature":0.5, "max_length":512}, huggingfacehub_api_token=os.getenv("HUGGINGFACEHUB_API_TOKEN"))
    prompt_template = """
    B·∫°n l√† m·ªôt tr·ª£ l√Ω ·∫£o chuy√™n ph√¢n t√≠ch b·∫£o m·∫≠t. 
    B·∫°n nh·∫≠n t√†i li·ªáu v√† ph·∫£i v·ª´a:
    1. Gi·∫£i th√≠ch n·ªôi dung trong t√†i li·ªáu.
    2. D·ª±a tr√™n c√°c v√≠ d·ª• trong t√†i li·ªáu, h√£y **t·ª± suy lu·∫≠n v√† s√°ng t·∫°o th√™m** nh·ªØng v√≠ d·ª• m·ªõi c√≥ c√πng √Ω nghƒ©a ho·∫∑c c√πng m·ª•c ƒë√≠ch (nh∆∞ng KH√îNG ƒë∆∞·ª£c b·ªãa ra th·ª© sai l·ªách v·ªõi ng·ªØ c·∫£nh).

    Nguy√™n t·∫Øc:
    - N·∫øu trong t√†i li·ªáu c√≥ payload, h√£y ph√¢n t√≠ch m·∫´u payload ƒë√≥ v√† t·∫°o ra th√™m 2‚Äì3 payload m·ªõi c√πng lo·∫°i (bi·∫øn th·ªÉ).
    - N·∫øu t√†i li·ªáu kh√¥ng c√≥ v√≠ d·ª• r√µ r√†ng, h√£y tr·∫£ l·ªùi: "Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y v√≠ d·ª• trong t√†i li·ªáu."
    - Khi t·∫°o ra n·ªôi dung m·ªõi, h√£y gi·∫£i th√≠ch ng·∫Øn g·ªçn b·∫°n ƒë√£ bi·∫øn ƒë·ªïi nh∆∞ th·∫ø n√†o.
    ----------------
    {context}
    ----------------
    C√¢u h·ªèi: {question}
    """

    PROMPT = PromptTemplate(
        template=prompt_template,
        input_variables=["context", "question"]
    )
    # doc_chain = StuffDocumentsChain(
    #     llm_chain=LLMChain(llm=llm, prompt=PROMPT),
    #     document_variable_name="context"
    # )
    memory = ConversationBufferMemory(memory_key="chat_history", return_messages=True)
    conversation_chain = ConversationalRetrievalChain.from_llm(
        llm=llm,
        retriever=vectorstore.as_retriever(),
        combine_docs_chain_kwargs={"prompt": PROMPT},
        memory=memory
    )
    return conversation_chain
    
def handle_userinput(user_question):
    response = st.session_state.conversation({"question": user_question})
    st.session_state.chat_history = response["chat_history"]
    for i, message in enumerate(st.session_state.chat_history):
        if i % 2 == 0:
            st.write(user_template.replace("{{MSG}}", message.content), unsafe_allow_html=True)
        else:
            st.write(bot_template.replace("{{MSG}}", message.content), unsafe_allow_html=True)

def main():
    load_dotenv()
    st.set_page_config(page_title="My virtual Assistant App", page_icon="ü§ñ")
    st.write(css, unsafe_allow_html=True)
    if "conversation" not in st.session_state:
        st.session_state.conversation = None
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = None
    st.header("Welcome to My virtual Assistant App! ü§ñ")
    user_question = st.text_input("Ask me anything:")
    if user_question:
        handle_userinput(user_question)
    st.write(user_template.replace("{{MSG}}", "hello bot"), unsafe_allow_html=True)
    st.write(bot_template.replace("{{MSG}}", "hello my friend"), unsafe_allow_html=True)
    with st.sidebar:
        st.subheader("Your documents here")
        pdf_docs = st.file_uploader(
            "Upload your documents here and click on Process", accept_multiple_files=True)
        if st.button("Process"):
            with st.spinner("Processing..."):
                # get pdf text
                raw_text = get_pdf_text(pdf_docs)
                
                # get the text chunks
                chunks = get_text_chunks(raw_text)
                # st.write(chunks)

                # create vector store
                vectorstore = get_vectorstore(chunks)

                # create conversation chain
                st.session_state.conversation = get_conversation_chain(vectorstore)



if __name__ == "__main__":
    main()